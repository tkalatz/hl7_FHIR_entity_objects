//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StructureMapSourceListMode-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="StructureMapSourceListMode-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="first"/>
 *     &lt;enumeration value="not_first"/>
 *     &lt;enumeration value="last"/>
 *     &lt;enumeration value="not_last"/>
 *     &lt;enumeration value="only_one"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "StructureMapSourceListMode-list")
@XmlEnum
public enum StructureMapSourceListModeList {


    /**
     * First
     * 
     */
    @XmlEnumValue("first")
    FIRST("first"),

    /**
     * All but the first
     * 
     */
    @XmlEnumValue("not_first")
    NOT_FIRST("not_first"),

    /**
     * Last
     * 
     */
    @XmlEnumValue("last")
    LAST("last"),

    /**
     * All but the last
     * 
     */
    @XmlEnumValue("not_last")
    NOT_LAST("not_last"),

    /**
     * Enforce only one
     * 
     */
    @XmlEnumValue("only_one")
    ONLY_ONE("only_one");
    private final java.lang.String value;

    StructureMapSourceListModeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static StructureMapSourceListModeList fromValue(java.lang.String v) {
        for (StructureMapSourceListModeList c: StructureMapSourceListModeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
