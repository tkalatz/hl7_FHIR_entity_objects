//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PropertyType-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PropertyType-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="code"/>
 *     &lt;enumeration value="Coding"/>
 *     &lt;enumeration value="string"/>
 *     &lt;enumeration value="integer"/>
 *     &lt;enumeration value="boolean"/>
 *     &lt;enumeration value="dateTime"/>
 *     &lt;enumeration value="decimal"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PropertyType-list")
@XmlEnum
public enum PropertyTypeList {


    /**
     * code (internal reference)
     * 
     */
    @XmlEnumValue("code")
    CODE("code"),

    /**
     * Coding (external reference)
     * 
     */
    @XmlEnumValue("Coding")
    CODING("Coding"),

    /**
     * string
     * 
     */
    @XmlEnumValue("string")
    STRING("string"),

    /**
     * integer
     * 
     */
    @XmlEnumValue("integer")
    INTEGER("integer"),

    /**
     * boolean
     * 
     */
    @XmlEnumValue("boolean")
    BOOLEAN("boolean"),

    /**
     * dateTime
     * 
     */
    @XmlEnumValue("dateTime")
    DATE_TIME("dateTime"),

    /**
     * decimal
     * 
     */
    @XmlEnumValue("decimal")
    DECIMAL("decimal");
    private final java.lang.String value;

    PropertyTypeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static PropertyTypeList fromValue(java.lang.String v) {
        for (PropertyTypeList c: PropertyTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
