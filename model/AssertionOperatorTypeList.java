//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AssertionOperatorType-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AssertionOperatorType-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="equals"/>
 *     &lt;enumeration value="notEquals"/>
 *     &lt;enumeration value="in"/>
 *     &lt;enumeration value="notIn"/>
 *     &lt;enumeration value="greaterThan"/>
 *     &lt;enumeration value="lessThan"/>
 *     &lt;enumeration value="empty"/>
 *     &lt;enumeration value="notEmpty"/>
 *     &lt;enumeration value="contains"/>
 *     &lt;enumeration value="notContains"/>
 *     &lt;enumeration value="eval"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "AssertionOperatorType-list")
@XmlEnum
public enum AssertionOperatorTypeList {


    /**
     * equals
     * 
     */
    @XmlEnumValue("equals")
    EQUALS("equals"),

    /**
     * notEquals
     * 
     */
    @XmlEnumValue("notEquals")
    NOT_EQUALS("notEquals"),

    /**
     * in
     * 
     */
    @XmlEnumValue("in")
    IN("in"),

    /**
     * notIn
     * 
     */
    @XmlEnumValue("notIn")
    NOT_IN("notIn"),

    /**
     * greaterThan
     * 
     */
    @XmlEnumValue("greaterThan")
    GREATER_THAN("greaterThan"),

    /**
     * lessThan
     * 
     */
    @XmlEnumValue("lessThan")
    LESS_THAN("lessThan"),

    /**
     * empty
     * 
     */
    @XmlEnumValue("empty")
    EMPTY("empty"),

    /**
     * notEmpty
     * 
     */
    @XmlEnumValue("notEmpty")
    NOT_EMPTY("notEmpty"),

    /**
     * contains
     * 
     */
    @XmlEnumValue("contains")
    CONTAINS("contains"),

    /**
     * notContains
     * 
     */
    @XmlEnumValue("notContains")
    NOT_CONTAINS("notContains"),

    /**
     * evaluate
     * 
     */
    @XmlEnumValue("eval")
    EVAL("eval");
    private final java.lang.String value;

    AssertionOperatorTypeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static AssertionOperatorTypeList fromValue(java.lang.String v) {
        for (AssertionOperatorTypeList c: AssertionOperatorTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
