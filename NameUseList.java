//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for NameUse-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="NameUse-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="usual"/>
 *     &lt;enumeration value="official"/>
 *     &lt;enumeration value="temp"/>
 *     &lt;enumeration value="nickname"/>
 *     &lt;enumeration value="anonymous"/>
 *     &lt;enumeration value="old"/>
 *     &lt;enumeration value="maiden"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "NameUse-list")
@XmlEnum
public enum NameUseList {


    /**
     * Usual
     * 
     */
    @XmlEnumValue("usual")
    USUAL("usual"),

    /**
     * Official
     * 
     */
    @XmlEnumValue("official")
    OFFICIAL("official"),

    /**
     * Temp
     * 
     */
    @XmlEnumValue("temp")
    TEMP("temp"),

    /**
     * Nickname
     * 
     */
    @XmlEnumValue("nickname")
    NICKNAME("nickname"),

    /**
     * Anonymous
     * 
     */
    @XmlEnumValue("anonymous")
    ANONYMOUS("anonymous"),

    /**
     * Old
     * 
     */
    @XmlEnumValue("old")
    OLD("old"),

    /**
     * Name changed for Marriage
     * 
     */
    @XmlEnumValue("maiden")
    MAIDEN("maiden");
    private final java.lang.String value;

    NameUseList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static NameUseList fromValue(java.lang.String v) {
        for (NameUseList c: NameUseList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
