//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SearchComparator-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SearchComparator-list">
 *   &lt;restriction base="{http://hl7.org/fhir}code-primitive">
 *     &lt;enumeration value="eq"/>
 *     &lt;enumeration value="ne"/>
 *     &lt;enumeration value="gt"/>
 *     &lt;enumeration value="lt"/>
 *     &lt;enumeration value="ge"/>
 *     &lt;enumeration value="le"/>
 *     &lt;enumeration value="sa"/>
 *     &lt;enumeration value="eb"/>
 *     &lt;enumeration value="ap"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SearchComparator-list")
@XmlEnum
public enum SearchComparatorList {


    /**
     * Equals
     * 
     */
    @XmlEnumValue("eq")
    EQ("eq"),

    /**
     * Not Equals
     * 
     */
    @XmlEnumValue("ne")
    NE("ne"),

    /**
     * Greater Than
     * 
     */
    @XmlEnumValue("gt")
    GT("gt"),

    /**
     * Less Than
     * 
     */
    @XmlEnumValue("lt")
    LT("lt"),

    /**
     * Greater or Equals
     * 
     */
    @XmlEnumValue("ge")
    GE("ge"),

    /**
     * Less of Equal
     * 
     */
    @XmlEnumValue("le")
    LE("le"),

    /**
     * Starts After
     * 
     */
    @XmlEnumValue("sa")
    SA("sa"),

    /**
     * Ends Before
     * 
     */
    @XmlEnumValue("eb")
    EB("eb"),

    /**
     * Approximately
     * 
     */
    @XmlEnumValue("ap")
    AP("ap");
    private final java.lang.String value;

    SearchComparatorList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static SearchComparatorList fromValue(java.lang.String v) {
        for (SearchComparatorList c: SearchComparatorList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
