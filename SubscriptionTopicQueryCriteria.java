//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.12.11 at 03:47:56 PM EET 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * Describes a stream of resource state changes identified by trigger criteria and annotated with labels useful to filter projections from this topic.
 * 
 * <p>Java class for SubscriptionTopic.QueryCriteria complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SubscriptionTopic.QueryCriteria">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="previous" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="resultForCreate" type="{http://hl7.org/fhir}CriteriaNotExistsBehavior" minOccurs="0"/>
 *         &lt;element name="current" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="resultForDelete" type="{http://hl7.org/fhir}CriteriaNotExistsBehavior" minOccurs="0"/>
 *         &lt;element name="requireBoth" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SubscriptionTopic.QueryCriteria", propOrder = {
    "previous",
    "resultForCreate",
    "current",
    "resultForDelete",
    "requireBoth"
})
public class SubscriptionTopicQueryCriteria
    extends BackboneElement
{

    protected String previous;
    protected CriteriaNotExistsBehavior resultForCreate;
    protected String current;
    protected CriteriaNotExistsBehavior resultForDelete;
    protected Boolean requireBoth;

    /**
     * Gets the value of the previous property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrevious() {
        return previous;
    }

    /**
     * Sets the value of the previous property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrevious(String value) {
        this.previous = value;
    }

    /**
     * Gets the value of the resultForCreate property.
     * 
     * @return
     *     possible object is
     *     {@link CriteriaNotExistsBehavior }
     *     
     */
    public CriteriaNotExistsBehavior getResultForCreate() {
        return resultForCreate;
    }

    /**
     * Sets the value of the resultForCreate property.
     * 
     * @param value
     *     allowed object is
     *     {@link CriteriaNotExistsBehavior }
     *     
     */
    public void setResultForCreate(CriteriaNotExistsBehavior value) {
        this.resultForCreate = value;
    }

    /**
     * Gets the value of the current property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrent() {
        return current;
    }

    /**
     * Sets the value of the current property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrent(String value) {
        this.current = value;
    }

    /**
     * Gets the value of the resultForDelete property.
     * 
     * @return
     *     possible object is
     *     {@link CriteriaNotExistsBehavior }
     *     
     */
    public CriteriaNotExistsBehavior getResultForDelete() {
        return resultForDelete;
    }

    /**
     * Sets the value of the resultForDelete property.
     * 
     * @param value
     *     allowed object is
     *     {@link CriteriaNotExistsBehavior }
     *     
     */
    public void setResultForDelete(CriteriaNotExistsBehavior value) {
        this.resultForDelete = value;
    }

    /**
     * Gets the value of the requireBoth property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean getRequireBoth() {
        return requireBoth;
    }

    /**
     * Sets the value of the requireBoth property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRequireBoth(Boolean value) {
        this.requireBoth = value;
    }

}
